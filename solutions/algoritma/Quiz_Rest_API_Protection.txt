- Manakah alogritma yang tepat untuk meng-encode/menyandikan proses pembuatan token dari JWT yang biasa dipakai oleh node js? Jawaban betulnya di pilihan D

a. HMCSHA 256([base64UrlEncode(payload) + “.” + base64UrlEncode(header)], secret-key).

b. HMCSHA 384([base32UrlEncode(header) + “.” + base64UrlEncode(payload)], secret-key).

c. HMCSHA 256([base32UrlEncode(payload) + “.” + base64UrlEncode(header)], secret-key).

d. HMCSHA 256([base64UrlEncode(header) + “.” + base64UrlEncode(payload)], secret-key). ===> Betul

e. HMCSHA 384([base32UrlEncode(header) + “.” + base32UrlEncode(payload], secret-key).


- Manakah yang termasuk alogritma dari stateless token authentication? Jawaban betulnya di pilihan B

a. - User menginput kredensial login mereka.

   - Server memverifikasi  data kredensial user yang di kirim dari client, dan jika data kredensialnya betul maka server akan membuat session yang akan disimpan di database.
    
   - Lalu server akan mengirimkan data dari hasil verifikasi tersebut ke client yang akan disimpan di browser mereka.

   - Untuk request berikutnya, ID dari data kredensial user tersebut akan diverifikasi oleh server dengan membandingkan data kredensial user yang sebelumnya sudah disimpan di database.

   - Ketika User melakukan logout dari client, maka data kredensial user tersebut akan di hancurkan/destroyed dari server maupun client.

b. - User menginput kredensial login mereka.

   - Server memverifikasi data kredensial user yang dikirim dari client,  dan jika data kredensial usernya betul maka server akan mengubah data kredensial user tersebut menjadi bearer token yang akan disimpan di dalam request lalu dikirimkan kepada client.

   - Untuk request berikutnya, client akan mengirimkan bearer token kepada server lalu bearer token tersebut akan di verifikasi oleh server.

   - Ketika User melakukan logout dari client, maka bearer token yang disimpan di client akan tetap berada di client atau bisa juga di hancurkan/destroyed oleh client.


c. - User menginput kredensial login mereka.

   - Server memverifikasi data kredensial user yang di kirim dari client, dan jika data kredensial usernya betul maka server akan membuat bearer token yang akan disimpan di dalam variable lokal.
    
   - Lalu server akan mengirimkan data dari hasil verifikasi tersebut ke client yang akan disimpan di browser mereka.

   - Untuk request berikutnya, ID dari data kredensial user tersebut akan diverifikasi oleh server dengan membandingkan data kredensial user yang sebelumnya sudah disimpan di dalam variable lokal.

   - Ketika User melakukan logout dari client, maka data kredensial user tersebut akan di hancurkan/destroyed dari server maupun client.

d. - User menginput kredensial login mereka.

   - Server tidak perlu memverifikasi kredensial yang di kirim dari client dan disimpan di dalam variable lokal.
    
   - Lalu server akan mengirimkan data kredensial user tersebut ke client yang akan disimpan di browser mereka.

   - Untuk request berikutnya, client akan mengirimkan kembali data kredensial user yang telah disimpan kepada server.

   - Ketika User melakukan logout dari client, maka data kredensial tersebut akan di hancurkan/destroyed dari server maupun client.


- Manakah langkah yang tepat untuk proses login user? Jawaban betulnya di pilihan A

a. Pencarian data User di database berdasarkan email user - proses pengecekan password yang dikirimkan oleh client ke server dengan password yang telah di enkripsi - server mengirimkan access token user kepada client.

b. Pencarian data User di database berdasarkan password user - proses pengecekan email yang dikirimkan oleh client ke server dengan password yang telah di enkripsi - server mengirimkan access token user kepada client.

c. Pencarian data User di database berdasarkan id user - proses pengecekan password yang dikirimkan oleh client ke server dengan password user lain - server mengirimkan password user kepada client.

d. Pencarian data User di database berdasarkan email user - server mengirimkan email user kepada client.



- Manakah contoh codingan yang tepat untuk membuat access token melalui JWT di server? Jawaban betulnya di pilihan A

a. jwt.sign({ email: 'william@mail.com' }, "secret_key");

b. jwtSign({ email: 'william@mail.com' }, "secret_key");

c. sign.jwt({ email: 'william@mail.com' }, "secret_key");

d. jwt.sign( email: 'william@mail.com' , "secret_key");

e. jwt.sign( 'william@mail.com' , "secret_key");


- Jika access token yang di kirimkan oleh client tidak tepat, maka error status yang tepat adalah: Jawaban betulnya di pilihan E

a. 403

b. 500

c. 203

d. 404

e. 401


- Apakah kepanjangan dari JWT? Jawaban betulnya di pilihan D

a. Jeremy Williams Tuchenbaugh

b. Jason Withdraw Token

c. Jason Website Token

d. Jason Web Token

e. Jasonry Web Token



- Jika kita ingin membuat access token pada saat user sedang login, maka method JWT yang kita gunakan adalah: Jawaban betulnya di pilihan C

a. jwt.verfiy

b. jwt.decode

c. jwt.sign

d. jwt.fetch

e. jwt.encrypt






